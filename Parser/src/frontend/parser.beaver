// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
//%goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import Imports
			|
			;

Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations 
	|
	;
	
Declaration = FunctionDeclaration | FieldDeclaration | TypeDeclaration ;

FunctionDeclaration = AccessibilitySpecifier TypeName ID LPAREN ParameterList RPAREN LCURLY StatementsList RCURLY ;

FieldDeclaration = AccessibilitySpecifier TypeName ID SEMICOLON ;

TypeDeclaration = AccessibilitySpecifier TYPE ID EQL STRING_LITERAL SEMICOLON;

AccessibilitySpecifier = PUBLIC
	|
	;

TypeName = PrimitiveType | ArrayType | ID;

PrimitiveType = VOID | BOOLEAN | INT;


/* STILL TO DO */
ArrayType = PrimitiveType LBRACKET RBRACKET;

ParameterList = ParameterList2
	|
	;
	
ParameterList2 = ParameterList2 COMMA Parameter
	| Parameter
	;

Parameter = TypeName ID;

Statement = LocalVariableDeclaration | BlockStatements | IfStatement | WhileStatement | BreakStatement | ReturnStatement | ExpessionStatement ;

StatementsList = Statement StatementsList
	|
	;

LocalVariableDeclaration = TypeName ID SEMICOLON;

BlockStatements = LCURLY StatementsList RCURLY;

IfStatement = IfStatement1 IfStatement2;

IfStatement1 = IF LPAREN Expression RPAREN Statement IfStatement2;

IfStatement2 = ELSE Statement
	|
	;

WhileStatement = WHILE LPAREN Expression RPAREN Statement;

BreakStatement = BREAK SEMICOLON;

/* PROBABLY NOT RIGHT, EXPRESSION IS OPTIONAL */
ReturnStatement = RETURN ReturnStatement2 SEMICOLON;

ReturnStatement2 = Expression
	|
	;

ExpessionStatement = Expression SEMICOLON;

Expression = Assignment 
	| RightHandSideExpression;

Assignment = LeftHandSideExpression EQL Expression;

LeftHandSideExpression = ID | ArrayAccess;

ArrayAccess = LeftHandSideExpression LBRACKET Expression RBRACKET;

RightHandSideExpression = ArithmeticExpression RightHandSideExpression2;

RightHandSideExpression2 = ComparisonOperator ArithmeticExpression
	|
	;

ComparisonOperator = EQEQ | NEQ | LT | LEQ | GT | GEQ;

ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
	| Term
	;

AdditiveOperator = PLUS | MINUS;

Term = Term MultiplicativeOperator Factor
	| Factor
	;

MultiplicativeOperator = TIMES | DIV | MOD;

Factor = MINUS Factor
	| PrimaryExpression
	;

PrimaryExpression = LeftHandSideExpression 
	| FunctionCall
	| ArrayExpression
	| STRING_LITERAL
	| INT_LITERAL
	| TRUE
	| FALSE
	| ParenthesisedExpression
	;

FunctionCall = ID LPAREN ExpressionList RPAREN;

ExpressionList = ExpressionList2
	|
	;
	
ExpressionList2 = ExpressionList2 COMMA Expression
	| Expression
	;
ArrayExpression = LBRACKET ExpressionList2 RBRACKET;
ParenthesisedExpression = LPAREN Expression RPAREN;


/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules. */	  
//Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
//           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;
